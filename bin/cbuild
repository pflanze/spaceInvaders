#!/usr/bin/perl -w

# Sat 19 Dec 01:33:42 UTC 2020
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

use strict; use warnings FATAL => 'uninitialized';
use experimental 'signatures';

use POSIX qw(:sys_wait_h _exit EEXIST dup2);
# ^ XX only when using smp?

# use lib "/opt/functional-perl/lib";
# use Chj::singlequote qw(possibly_singlequote_sh);

sub singlequote_sh($str, $alternative = undef) {
    if (defined $str) {
        $str =~ s/\'/'\\\''/sg;
        "'$str'"
    } else {
        defined($alternative) ? $alternative : "undef"
    }
}

sub possibly_singlequote_sh($str) {
    if ($str =~ m{^[=\w/.-]+\z}) {
        $str
    } else {
        singlequote_sh $str
    }
}

# use Chj::xperlfunc qw(xsystem_safe xgetfile_utf8);

sub xxsystem_safe {
    @_ > 0 or die "xxsystem_safe: missing arguments";
    no warnings;
    (system { $_[0] } @_) >= 0
        or die "xxsystem_safe: could not start command '$_[0]': $!";
    $? == 0 or die "xxsystem_safe: process terminated with status $?";
}

sub xgetfile_utf8($path) {
    open my $in, "<", $path or die "xgetfile_utf8($path): open: $!";
    binmode $in, ":encoding(UTF-8)" or die "binmode";
    local $/;
    my $cnt = <$in> // die "xgetfile_utf8($path): read: $!";
    close $in or die "xgetfile_utf8($path): close: $!";
    $cnt
}

sub xexec {
    exec @_ or _exit 127; #?
}

sub tempdir () {
    my $tries= 0;
  TRY: {
      my $str = $$ . "-" . rand;
      $str=~ s/0?\.//;
      my $path= "/tmp/$str";
      if (mkdir $path) {
          $path
      } elsif ($! == EEXIST and $tries++ < 5) {
          redo TRY;
      } else {
          die "mkdir($path): $!";
      }
    }
}

our $verbose=0;

sub basepath ($path, $suffix) {
    # unlike basename this does not cut away the dir; and it dies if
    # the suffix is wrong/missing.
    $path=~ s/\Q$suffix\E\z//
      or die "path does not end in suffix $suffix: $path";
    $path
}
sub maybe_suffix ($path) {
    if ($path=~ /\.(\w+)\z/) {
        $1
    } else {
        undef
    }
}

sub dbg {
    print STDERR "$myname: ", @_, "\n" if $verbose;
}

# ------------------------------------------------------------------
# Task system for parallel execution:

sub fork_off($thunk) {
    my $pid= fork;
    defined $pid or die "fork: $!";
    if ($pid) {
        $pid
    } else {
        # Capture exceptions since we don't want there to be a chance
        # of them being captured further up. We do need to exit. Is it
        # right to call _exit? No, we'll want to flush.
        eval {
            $thunk->();
            close STDOUT or warn "close stdout: $!";
            close STDERR or warn "close stderr: $!";
            _exit 0;
        };
        #warn "$myname: process $$: exiting by exception: $@";
        warn "$myname: subprocess exception: $@";
        #exit 1;
        # There are some unexplained cleanup handlers that lead to the
        # program exiting NOT with exit code 1 but 0 that way, thus, use
        # _exit instead, but for that do flush filehandles (needed?):
        close STDOUT or warn "close stdout: $!";
        close STDERR or warn "close stderr: $!";
        _exit 1;
    }
}

our $max_jobs;

our $do_die_from_sighandler= 0;
my $global_num_failed_tasks= 0; # ugly

my @waiting_tasks;
my %running_tasks; # by pid
my @finished_tasks;

my $tmpdir= tempdir;
my $tmpdir_owner_pid= $$;
END {
    local $?;
    local $@;
    local $!;
    if ($$ == $tmpdir_owner_pid) {
        unlink $_ for glob "$tmpdir/*";
        rmdir $tmpdir;
    }
}

package PFLANZE::Task {
    # id, thunk, outpath, pid, status
    sub start ($self) {
        my $thunk= $$self{thunk} or die "already started";

        my $outpath= "$tmpdir/$$self{id}";
        open my $out, ">", $outpath
            or die "open($outpath): $!";
        my $job= sub {
            open STDOUT, ">&", $out or die $!;
            open STDERR, ">&", $out or die $!;
            goto $thunk
        };
        {
            my $old_num= $global_num_failed_tasks;
            local $do_die_from_sighandler= 0; # stop interruptions
            my $pid= main::fork_off($job);
            $$self{pid}= $pid;
            close $out or die "close($outpath): $!";
            $$self{outpath}= $outpath;
            $$self{thunk}= undef; # for GC
            $running_tasks{$pid}= $self;
            # It was already removed from @waiting_tasks, OK?
            if ($global_num_failed_tasks != $old_num) {
                die bless [], "PFLANZE::ImmediateStopException"
                    if $do_die_from_sighandler;
            }
        }
    }
    sub join ($self, $say_status = 0) {
        open my $in, "<", $$self{outpath} or die "open($$self{outpath}): $!";
        my $prefix = $main::verbose ? "|| " : "";
        print STDERR "$prefix$_" while (<$in>); # we don't know whether it was to stdout/err
        close $in or die $!;
        # if ($say_status) {
        #     if ($$self{status} != 0) {
        #         # This is pointless as the child already printed the
        #         # status to the file at outpath.
        #         print STDERR
        #             "$myname: process $$self{pid} exited with status $$self{status}\n";
        #     }
        # }
        $$self{status}
    }
    # sub xjoin ($self) {
    #     # On error, does not return but throw an exception that
    #     # signals the need to finish_all_tasks_early.
    #     my $status= $self->join(1);
    #     return if $status == 0;
    #     die $immediate_stop_exception
    # }
    # Ah, can't use this from signal handler as the signal handler
    # must collect all children before throwing.
}

sub scheduler_update () {
    # Move waiting tasks to running state if there are available
    # slots.
    return unless defined $max_jobs;
    while (1) {
        last if (scalar keys %running_tasks) >= $max_jobs;
        last unless @waiting_tasks;
        my $task= shift @waiting_tasks;
        $task->start;
    }
}

{
    no experimental 'signatures';
    my $taskid= 0;
    sub schedule(&) {
        my ($thunk)= @_;
        my $task= bless { id=> $taskid++,
                          thunk=> $thunk,
                          outpath=> undef,
                          pid=> undef,
                          status=> undef },
            "PFLANZE::Task";
        push @waiting_tasks, $task;
        # Start it, if possible, and get the scheduling via sigchld
        # going:
        scheduler_update;
        ()
    }
}

sub await_all_tasks($do_schedule) {
    while (scalar keys %running_tasks) {
        scheduler_update if $do_schedule;
        # ^ repeatedly as it doesn't necessarily make all waiting
        #   tasks runnable on each call.
        
        # warn "waiting...";
        sleep 1; # will be interrupted by SIGCHLD thus not a
                 # problem. XX except there is a race where SIGCHLD
                 # can happen after the above but before here?
    }
}

sub finish_all_tasks($do_schedule) {
    # Waits for all tasks to finish (then, if $do_immediate_join is
    # false, prints all join results of the finished tasks and returns
    # all failed tasks).
    await_all_tasks($do_schedule);
    # There should be none if $do_immediate_join, but anyway:
    my @t= sort { $a->{id} cmp $b->{id} } @finished_tasks;
    my @failed_tasks;
    for my $t (@t) {
        if ($t->join(1) != 0) {
            push @failed_tasks, $t;
        }
    }
    @failed_tasks
}

sub finish_all_tasks_early() {
    @waiting_tasks= (); # kill them before started.
    finish_all_tasks(0)
}

my $do_immediate_join= 1;

my $main_pid= $$;
sub child_handler {
    return unless $$ == $main_pid; # needed?
    local $?;
    local $@;
    local $!;
    my $num_failed_tasks= 0;
    while (1) {
        my $pid= waitpid -1, WNOHANG;
        last if $pid <= 0;
        my $status= $?;
        dbg "child $pid: status $status";
        my $task= delete $running_tasks{$pid} //
            die "bug: unknown child pid $pid";
        $$task{status}= $status;
        if ($do_immediate_join) {
            $task->join(1);
            if ($status != 0) {
                $num_failed_tasks++;
            }
        } else {
            # only non joined are left that way, ok?
            push @finished_tasks, $task;
        }
    }
    if ($num_failed_tasks) {
        $global_num_failed_tasks += $num_failed_tasks;
        die bless [], "PFLANZE::ImmediateStopException"
            if $do_die_from_sighandler;
    } else {
        scheduler_update;
    }
}

$SIG{CHLD}= \&child_handler;

# ------------------------------------------------------------------

package PFLANZE::Cached {
    # To avoid stats etc. during the same run if the results couldn't
    # have changed.

    use Chj::xperlfunc ();

    my $allow_cache= 1;

    sub new ($class) {
        bless {pid=> $$, path=>{}}, $class
    }

    sub xstat ($s, $path) {
        die "not in correct process" unless $$s{pid} == $$;
        if ($allow_cache and exists $$s{$path}) {
            main::dbg "# xstat($path): cached";
            if (defined (my $st= $$s{path}{$path})) {
                $st
            } else {
                # previous Xstat call gave undef, i.e. not exist
                die "xstat($path): file does not exist";
            }
        } else {
            main::dbg "xstat($path): get from OS";
            local $Chj::xperlfunc::time_hires= 1;
            $$s{path}{$path}= Chj::xperlfunc::xstat($path)
        }
    }

    sub Xstat ($s, $path) {
        die "not in correct process" unless $$s{pid} == $$;
        if ($allow_cache and exists $$s{path}{$path}) {
            main::dbg "# Xstat($path): cached";
            $$s{path}{$path}
        } else {
            main::dbg "Xstat($path): get from OS";
            local $Chj::xperlfunc::time_hires= 1;
            $$s{path}{$path}= Chj::xperlfunc::Xstat($path)
        }
    }

    sub invalidate($s, $path) {
        die "not in correct process" unless $$s{pid} == $$;
        main::dbg "invalidate($path)";
        delete $$s{path}{$path}
    }
}

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname target(s)

  A build tool that knows how to build C programs, with automatic
  dependency handling. (Really just to figure out the best algorithm
  that would really be used.) Uses -MM compiler flag to generate and
  update dependency tracking (*.d) files as needed.

  Env vars:

    CC      the c compiler (and arguments, space separated; required);
            currently CC is also used for linking, thus pass arguments
            that are also relevant for linking in CC, not CFLAGS.
    CFLAGS  the compiler flags (none if not given).
    VPATH   path to the source files (current dir if not given).

  Options:
    --jobs n   number of jobs to run in parallel (default: as many as
               there are CPUs)
    --single   run single-threaded (overrides --jobs if given later)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

our $opt_dry;
our $opt_single;
if (sub {
    for (@ARGV) { return 1 if /^-/ } 0
    }->()) {
    require Getopt::Long;
    Getopt::Long::GetOptions("verbose"=> \$verbose,
                             "help"=> sub{usage},
                             "dry-run"=> \$opt_dry,
                             "jobs=n"=> \$max_jobs,
                             "single"=> sub {
                                 $max_jobs= undef;
                                 $opt_single= 1;
                             },
        ) or exit 1;
}
usage unless @ARGV;

$max_jobs //= do {
    if ($opt_single) {
        undef
    } else {
        my $s= xgetfile_utf8 "/proc/cpuinfo";
        my $n= $s=~ s/((?:^|\n)processor\s*:)/$1/g;
        warn "$myname: using --jobs=$n\n";
        $n
    }
};

sub getenv_list ($envname) {
    split / +/, ($ENV{$envname} // "")
}

our $VPATH= do {
    if (defined (my $v= $ENV{VPATH})) {
        "$v/"
    } else {
        ""
    }
};
our @CC= getenv_list "CC" or die "$myname: missing CC env var\n";
our @CFLAGS= getenv_list "CFLAGS";


my $printprefix= "";

my $cached= PFLANZE::Cached->new();

# ------------------------------------------------------------------
# Modifying operations: they are also doing the corresponding cache
# entry invalidations.

sub _CCo ($do_schedule, $outpath, $FLAGS, $args) {
    $cached->invalidate($outpath);
    my @cmd= (@CC, @$FLAGS, @$args, "-o", $outpath);
    my $pr= sub {
        print STDERR $printprefix,
            join (" ", map {possibly_singlequote_sh $_} @cmd), "\n";
    };
    if ($opt_dry) {
        &$pr
    } else {
        if (defined $max_jobs and $do_schedule) {
            schedule {
                &$pr;
                xexec @cmd;
            }
        } else {
            &$pr;
            xxsystem_safe @cmd;
        }
    }
}

sub CCo ($outpath, $args) {
    _CCo 0, $outpath, \@CFLAGS, $args
}

sub schedule_CCo ($outpath, $args) {
    _CCo 1, $outpath, \@CFLAGS, $args
}

sub LDo ($outpath, $args) {
    _CCo 0, $outpath, [], $args
}

# ------------------------------------------------------------------

sub _path ($suffix) {
    sub ($basepath) {
        die "wrong basepath '$basepath'"
            if (length $VPATH and $basepath=~ m/^\Q$VPATH/);
        "$basepath.$suffix"
    }
}
sub dpath; *dpath= _path "d";
sub opath; *opath= _path "o";
sub cpath ($basepath) {
    my $suffix= "c";
    die "wrong basepath '$basepath'"
        if (length $VPATH and $basepath=~ m/^\Q$VPATH/);
    "$VPATH$basepath.$suffix"
}


# basepath means the non-VPATH-prefixed path without suffix

sub basepath_of_path ($path) {
    my $b= $path;
    $b=~ s/\.\w+\z//
        or die "path does not have a suffix: '$b'";
    $b=~ s/^\Q$VPATH\E//
        or die "cpath does not start with VPATH: '$path'";
    $b
}

sub basepath_of_cpath ($cpath) {
    my $b= basepath $cpath, ".c";
    $b=~ s/^\Q$VPATH\E//
        or die "cpath does not start with VPATH: '$cpath'";
    $b
}

sub basepath_of_opath ($opath) {
    basepath $opath, ".o";
}


# XX misnamed: does not check whether making is needed!
sub _make_d_for ($basepath) {
    CCo dpath($basepath), ["-MM", cpath($basepath)];
}

our %deps_for; # opath => [ sourcefiles ]

sub load_d_for ($basepath) {
    main::dbg "load_d_for $basepath";#
    my $dpath= dpath $basepath;
    my $opath= opath $basepath;
    my $str= xgetfile_utf8 ($dpath);
    $str=~ s/^\Q$opath\E://
        or die "file '$dpath' does not start with '$opath'";
    $str=~ s/\\\n/ /sg;
    my @deps= grep {length $_} split /\s+/, $str;
    $deps_for{$opath}= \@deps;
}

sub old_dependencies_for ($basepath, $they_should_be_already_loaded) {
    # only works if d file already exists!
    my $opath= opath $basepath;
    $deps_for{$opath} // do {
        die "bug" if $they_should_be_already_loaded;
        load_d_for $basepath;
        $deps_for{$opath}
    }
}

sub dependencies_for ($cpath) {
    my $basepath= basepath_of_cpath $cpath;
    # .d needs to be made if .d is missing, .c is newer, or any of the
    # previously recorded dependencies have changed; the latter since
    # any included .h file may change which other .h files it
    # includes, too.
    my $dpath= dpath $basepath;
    my $do_rebuild= sub {
        my $targetstat= $cached->Xstat($dpath);
        return 1 if ! $targetstat;
        # The deps include the cpath, so don't have to check that one
        # separately. And it doesn't matter whether we use a .d file
        # older than the .c file and checking on dependencies that are
        # not dependencies anymore: since the worst that happens is
        # that we signal the need for a rebuild for a dependency that
        # isn't one any more but that case needs a rebuild anyway.
        my $deps= old_dependencies_for $basepath, 0;
        for my $path (@$deps) {
            # XX oh, might have to *build* that dependency (in the
            # general case)
            my $pathstat= $cached->Xstat($path);
            return 1 if ! $pathstat;
            return 1 if $targetstat->mtime <= $pathstat->mtime;
        }
        0
    }->();
    if ($do_rebuild) {
        _make_d_for $basepath;
        load_d_for $basepath;
        old_dependencies_for $basepath, 1
    } else {
        old_dependencies_for $basepath, 0
    }
}

sub make_o ($opath) {
    my $basepath= basepath_of_opath $opath;
    my $cpath= cpath $basepath;
    my $do_rebuild= sub {
        my $targetstat= $cached->Xstat($opath);
        return 1 if ! $targetstat;

        my $deps= dependencies_for $cpath;
        for my $path (@$deps) {
            # XX oh, might have to *build* that dependency (in the
            # general case)
            my $pathstat= $cached->Xstat($path);
            return 1 if ! $pathstat;
            return 1 if $targetstat->mtime <= $pathstat->mtime;
        }
        0
    }->();
    if ($do_rebuild) {
        schedule_CCo $opath, ["-c", $cpath];
        # ^ should explicitly say what?; Hey, is like Erlang/
        #   mailboxes. Pick up from there by filter.
        1
    } else {
        0
    }
}

sub make ($path) {
    if (my $suff = maybe_suffix $path) {
        if ($suff eq 'o') { make_o $path }
        else {
            die "Don't know how to handle file suffix '$suff' for: $path"
        }
    } else {
        # non-suffixed path: linking.
        my $basepath= $path;
        my $cpath= cpath $basepath;
        if ($cached->Xstat($cpath)) {
            # For all of $basepath's dependencies for which a $cpath
            # exists, build the corresponding $opath, and include it
            # in the linking.
            my $nbuilt= 0;
            my @opaths;
            my %done_opath;

            my $make_os_for;
            $make_os_for= sub ($basepath) {
                my $cpath= cpath $basepath;
                return unless $cached->Xstat($cpath);
                # There *is* a C file; build it:
                my $opath= opath $basepath;
                return if $done_opath{$opath}++;
                # ^ could check make_o's result instead, but this is
                #   more efficient.
                $nbuilt+= make_o $opath;
                push @opaths, $opath;
                my $deps= dependencies_for $cpath;
                for my $path (@$deps) {
                    my $basepath= basepath_of_path $path;
                    $make_os_for->($basepath);
                }
            };
            $make_os_for->($basepath);
            undef $make_os_for;

            dbg "LD, step 0";
            finish_all_tasks(1);
            # ^ our dependencies are in there, and only those (we're
            #   only scheduling object file builds). XX except, when
            #   building multiple binaries, could profit from delayed,
            #   non-waiting, link step!
            dbg "LD, step 1";
            my $do_rebuild= sub {
                my $opath= $path; # well..
                my $targetstat= $cached->Xstat($opath);
                return 1 if ! $targetstat;
                # @opaths are our @$deps here:
                for my $path (@opaths) {
                    # XX "oh, might have to *build* that dependency
                    # (in the general case)" case here, BUT: if we
                    # build here, then we can't short-cut evaluation!
                    # For now, keep above build and this here
                    # separated.
                    my $pathstat= $cached->Xstat($path);
                    return 1 if ! $pathstat;
                    # ^ XX btw: weird case! (In other do_rebuild
                    # loops, too.) Should really build, and fail in
                    # that step, instead of letting compiler fail? We
                    # here know it's a dependency, why don't *we* tell
                    # the user that it's missing and we don't know how
                    # to build it?
                    return 1 if $targetstat->mtime <= $pathstat->mtime;
                }
                0
            }->();
            if ($do_rebuild) {
                LDo $path, [reverse @opaths];
                $nbuilt++;
            }
            $nbuilt
        } else {
            # XX in the more general case, try to make $cpath
            # first/instead.
            die "There is no C file '$cpath' for '$basepath', don't know how to proceed"
        }
    }
}

# use FP::Repl::Trap;

eval {
    local $do_die_from_sighandler= 1;
    # ^XX *IS* Perl changing that back before eval becomes ineffective?
    for my $path (@ARGV) {
        make $path
            or print STDERR "$path: nothing to be done\n";
    }
    1
} || do {
    my $e= $@;
    # Yes, UNIVERSAL::isa shouldn't be used as $e could override isa,
    # but this is a simple enough case where it won't, and we don't
    # want to carry the loading cost of Safe::Isa.
    if (UNIVERSAL::isa($e, "PFLANZE::ImmediateStopException")) {
        # my ($num_failed)= @$e; pointless as we're not receiving
        # notification on other failed tasks outside the eval scope
        # above.
        my @more_failed= finish_all_tasks_early;
        my $n= $global_num_failed_tasks + @more_failed;
        die "$myname: $n failed job(s), terminating early.\n";
    } else {
        die $e
    }
};
